#ifndef _MSTD_GRAPH
#define _MSTD_GRAPH

#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <limits>
#include <functional>
#include <algorithm>
#include <cassert>

#include <fstream>

namespace mstd {

using namespace std;

struct edge;

struct edge;

struct vertex {
	vertex(int id_): id(id_) {
	}
	bool is_leaf() const { return e.empty(); }
	set<edge*> e;

	const edge* get_edge_to(int to) const;

	int id;
};

struct edge {  //from, to
	edge(vertex* f, const vertex* t): from(f), to(t) {
		from->e.insert(this);

	}
	~edge() {
		from->e.erase(this);
	}
	const edge* get_reverse() const {
		return to->get_edge_to(from->id);
	}
	vertex* from;
	const vertex* to;
};


const edge* vertex::get_edge_to(int to) const {
	for (const auto& i: e) if (i->to->id==to) return i;
	return 0;
}

struct basic_graph {
	enum type {
		directed, undirected
	};

	basic_graph(type t=directed): t(t) {  
	}

	basic_graph(const vector<string>& al, type t=directed): t(t) {  //v1 v2
		for (auto& l:al) {
			int v1=-1;
			int v2=-1;
			istringstream is(l);
			is >> v1;
			is >> v2;
			add(v1,v2);
		}
	}

	basic_graph(const vector<pair<int,int>>& al, type t=directed): t(t) {  //v1 v2
		for (auto& l:al) {
			add(l.first,l.second);
		}
	}

	basic_graph(const basic_graph&)=delete;
	basic_graph(basic_graph&& other): V(move(other.V)), E(move(other.E)), t(other.t) {
	}

	template<class P>
	void dot(const P& pred, const function<bool(const vertex&)>& is_leaf, const function<bool(const vertex&)>& is_done, ostream& os) const {
		os << "digraph {" << endl;
		for (auto v: V) {
			os << "task" << v.second->id << "[label=<" << v.second->id << ": " << pred(v.second->id) << ">";
			if (is_done(*v.second)) {
				os << ",color=green";
			}
			else if (is_leaf(*v.second)) {
				os << ",color=red";
			}
			os << "];" << endl;
		}
		for (auto e: E) {
			os << "task" << e.second->to->id << " -> task" << e.second->from->id << ";" << endl;
		}
		os << "}" << endl;
	}

	void dot(ostream& os) const {
		dot(
		[](int i) -> string { return to_string(i); },
		[](const vertex&v) -> bool { return v.is_leaf(); },
		[](const vertex&) -> bool { return false; },
		os);
	}	

	vertex* get_vertex(int iv) {
		auto i=V.find(iv);
		if (i==V.end()) {
			V.emplace(iv,new vertex(iv));
			i=V.find(iv);
		}
		return i->second;
	}

	pair<int,int> get_eid(int iv1, int iv2) const {
		return pair<int,int>(iv1,iv2);
	}
	pair<int,int> get_eid(const edge& e) const {
		return pair<int,int>(e.from->id,e.to->id);
	}
	pair<int,int> get_erid(const edge& e) const {
		return pair<int,int>(e.to->id,e.from->id);
	}


	edge* add(int iv1, int iv2) {
		if (iv1<0 || iv2<0) return 0;
		if (iv1==iv2) return 0;
		auto v1=get_vertex(iv1);
		auto v2=get_vertex(iv2);
		edge* e=new edge(v1,v2);
		E.emplace(get_eid(iv1,iv2),e);
		if (t==undirected) {
			edge* e=new edge(v2,v1);
			E.emplace(get_eid(iv2,iv1),e);
		}
		return e;
	}

	virtual void erase(edge* e) {
		auto eid=get_eid(*e);
		if (t==undirected) {
			auto i=E.find(get_erid(*e));
			if (i==E.end()) return;
			delete i->second;
			E.erase(i);
		}
		auto i=E.find(eid);
		if (i==E.end()) return;
		delete i->second;
		E.erase(i);
	}

	virtual ~basic_graph() {
		for (auto i: E) delete i.second;
		for (auto i: V) delete i.second;
	}

	struct visitor {
		virtual void start(const vertex&){};
		virtual void visit(const edge&){};
		virtual void visit(const vertex&){};
		virtual void finished(){};
		bool finish{false};
	};
	void breath_first(int iv, visitor& visitor_) const {
		auto v=V.find(iv);
		if (v==V.end()) return;
		breath_first(*v->second,visitor_);
	}

	void breath_first(const vertex& s, visitor& visitor_) const {
		visitor_.start(s);
		visitor_.visit(s);
		unordered_set<const edge*> visited;
		queue<edge*> q;
		for (auto e:s.e) {
			q.push(e);
		}
		while(!q.empty() && !visitor_.finish) {
			edge* e=q.front(); q.pop();
			if (visited.find(e)==visited.end()) {		
//				cout << e->to->id << endl;
				for (auto ed:e->to->e) {
//					cout << "    " << ed->from << " " << ed->to << endl;
					q.push(ed);
				}
				visitor_.visit(*e);
				visitor_.visit(*e->to);
				visited.emplace(e);
				if (t==undirected) {
					const edge* redge=e->get_reverse();
					assert(redge!=0);
					visited.emplace(redge);
				}
			}
		}
		visitor_.finished();
	}

	void depth_first(int iv, visitor& visitor_) const {
		auto v=V.find(iv);
		if (v==V.end()) return;
		depth_first(*v->second,visitor_);
	}

	void depth_first(const vertex& s, visitor& visitor_) const {
		visitor_.start(s);
		visitor_.visit(s);
		unordered_set<const edge*> visited;

		stack<edge*> q;
		for (auto e:s.e) {
			q.push(e);
		}
		while(!q.empty() && !visitor_.finish) {
			edge* e=q.top(); q.pop();
			if (visited.find(e)==visited.end()) {		
				for (auto ed:e->to->e) {
					q.push(ed);
				}
				visitor_.visit(*e);
				visitor_.visit(*e->to);
				visited.emplace(e);
				if (t==undirected) {
					const edge* redge=e->get_reverse();
					assert(redge!=0);
					visited.emplace(redge);
				}
			}
		}
		visitor_.finished();
	}

	int vertexes_size() const { return V.size(); }
	int edges_size() const { return t==directed?E.size():E.size()/2; }


	struct pairhash {
	public:
	  template <typename T, typename U>
	  std::size_t operator()(const std::pair<T, U> &x) const {
		//http://stackoverflow.com/questions/5889238/why-is-xor-the-default-way-to-combine-hashes
		//return std::hash<T>()(x.first) ^ std::hash<U>()(x.second);
		auto lhs=hash<T>()(x.first);
		auto rhs=hash<U>()(x.second);
		lhs^= rhs + 0x9e3779b9 + (lhs << 6) + (lhs >> 2);
		return lhs;
	  }
	};

	unordered_map<int,vertex*> V;
	unordered_map<pair<int,int>,edge*, pairhash> E;
	type t;

	
};


/// scalar - most common best path optimization vector 
template<typename T>
struct scalar {
	T value{1};
	scalar() { }
	scalar(const T&t): value(t) { }
	scalar(T&&t): value(move(t)) { }
	scalar(const string& s) {
		istringstream is(s);
		is>>value;
	}
	bool operator < (const scalar& other) const {
		return value < other.value;
	}
};

template<typename T>
istream& operator >> (istream& is, scalar<T>& v) {
	is >> v.value;
	return is;
}

template<typename Edata=scalar<int>>
struct graph: basic_graph {
	typedef basic_graph base;

	graph(type t=directed): base(t) {
	}

	graph(const vector<string>& al_values, type t=directed): base(t) {  //v1 v2
		for (auto& l:al_values) {
			int v1=-1;
			int v2=-1;
			istringstream is(l);
			is >> v1;
			is >> v2;

			Edata d;
			is >> d;
			add(v1,v2,move(d));
		}
	}

	graph(const graph&)=delete;
	graph(graph&& other): ed(move(other.ed)), basic_graph(move(other)) {
	}

	virtual ~graph() {
	}

	pair<int,int> get_edid(int iv1, int iv2) const {
		if (t==undirected && iv1>iv2) {
			return get_edid(iv2,iv1);
		}
		return make_pair(iv1,iv2);
	}

	edge* add(int iv1, int iv2, const Edata& d) {
		edge* e=base::add(iv1,iv2);
		ed.emplace(e,d);
		return e;
	}
	edge* add(int iv1, int iv2, Edata&& d) {
		edge* e=base::add(iv1,iv2);
		ed.emplace(e,move(d));
		return e;
	}
	vector<const edge*> sort_edges_no_descendent() const {
		vector<const edge*> v;
		v.reserve(ed.size());
		for (auto& i:ed) {
			v.push_back(i.first);
		}
		sort(v.begin(),v.end(),[&](const edge* e1,const edge* e2) -> bool {
			return ed.find(e1)->second < ed.find(e2)->second;
		});
		return move(v);
	}

	virtual void erase(edge* e) {
		ed.erase(ed.find(e));
		base::erase(e);
	}

	bool cycle(const edge& start) const {
		struct vis: visitor {
			vis(const edge& start): start(start) {
			}
			virtual void visit(const edge& e) {
				if (e.to->id==start.from->id) {
					cycle=true;
					finish=true;
  				}
			}
			const edge& start;
			bool cycle{false};
		};
		vis v(start);
		depth_first(*start.from,v);
		return v.cycle;
	}
	graph minimum_spanning_tree_kruskal() const {
		//http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/
		graph r(t);
		vector<const edge*> edges=sort_edges_no_descendent();
int i=0;
		for (const auto& e: edges) {
			edge* ne=r.add(e->from->id,e->to->id,ed.find(e)->second);
			if (r.cycle(*ne)) {
				r.erase(ne);
			}
			else {
				if (r.edges_size()==vertexes_size()-1) break;
			}
	++i;
	{
	cout << "written dot file: graph.dot" << endl;
	ostringstream os;
	os << "graph" << i << ".dot" ;
	ofstream f(os.str());
	r.dot(f);
	}

		}
		return move(r);
	}
	

	const Edata& get_edata(const edge& e) const {
		return ed.find(&e)->second;
	}

	unordered_map<const edge*,Edata> ed;
};


struct Vdata {
	Vdata():score(numeric_limits<int>::max()) {}
	Vdata(int v):score(v) {}
	const vertex* get_dst_vertex() const { return from->to; }
	const vertex* get_src_vertex() const { return from->from; }
	int score;
	const edge* from{0};
	bool operator <(const Vdata& other) const { return score<other.score; }
	template<typename Edata>
	Vdata operator+(const Edata& e) const {
		Vdata r;
		r.score=score+e.value;
		return move(r);
	}	
};

/// best_path visitor
///
/// this visitor traverses the graph through an optimized route
template<typename Edata, typename Vdata=Vdata>
struct best_path:basic_graph::visitor {
	unordered_map<const edge*,Edata> values;
	unordered_map<const vertex*,Vdata> vd; //vertex data
	const basic_graph& g;
	const vertex* f{0};
	const vertex* t{0};
	struct result:vector<const vertex*> {
		void dump(const std::function <string (const vertex&)>& _t, ostream& os) const {
			for (auto i:*this) os << _t(*i) << endl;
		}
		void dump(ostream& os) const {
			for (auto i:*this) os << i->id << endl;
		}
		void reverse() {
			result r;
			r.reserve(size());
			for (auto i=rbegin(); i!=rend(); ++i) 
				r.push_back(*i);
			*this=r;
		}
	};
	result r;
	best_path(const basic_graph&g_): g(g_) { //adjacency list + values
	}
	best_path(const basic_graph&g_, const vector<string>& al_values): g(g_) { //adjacency list + values
		for (auto& l:al_values) {
			int v1=-1;
			int v2=-1;
			istringstream is(l);
			is >> v1;
			is >> v2;
//			ostringstream os;
//			os << v1 << " " << v2;
			auto ie=g.E.find(make_pair(v1,v2));
			if (ie==g.E.end()) {
				cerr << "edge not found " << v1 << " " << v2 << endl;
				continue;
			}
			string value;
			getline(is,value);
			Edata t(value);
			values.emplace(ie->second,move(t));
		}
	}
	~best_path() {
	}
		enum algorithm {
			breath_first, depth_first
		
		};

	result compute(int from, int to,algorithm a) {
		auto ifrom=g.V.find(from);
		if (ifrom==g.V.end()) {
			cerr << from << " node not found" << endl;
			return r;
		}
		else f=ifrom->second;

		auto ito=g.V.find(to);
		if (ito==g.V.end()) {
			cerr << to << " node not found" << endl;
			return r;
		}
		else t=ito->second;
		switch(a) {
			case breath_first:
				g.breath_first(*f,*this);
				break;
			case depth_first:
				g.depth_first(*f,*this);
				break;
			default: cerr << "unknown algorithm" << endl;
		}
		return r;
	}

	Vdata& relax(const edge& e) {
		//obtain edge associated data structure
		auto edi=values.find(&e);
		if (edi==values.end()) {
			values.emplace(&e,Edata());
			edi=values.find(&e);
		}
		const auto& ed=edi->second; ////edge associated data structure

		//obtain source vertex associated data structure
		auto ivdf=vd.find(e.from);
		if (ivdf==vd.end()) {
			vd.emplace(e.from,Vdata());
			ivdf=vd.find(e.from);
		}

		//obtain destination vertex associated data structure
		auto ivdt=vd.find(e.to);
		if (ivdt==vd.end()) {
			vd.emplace(e.to,Vdata());
			ivdt=vd.find(e.to);
		}
		const Vdata& df=ivdf->second; //source vertex associated data structure
		Vdata& dt=ivdt->second; //destination vertex associated data structure
		auto sum=df+ed;	// from-vertex accumulated cost plus edge cost
		if (sum<dt) {
			dt=sum;
			dt.from=&e; //annotate in the destination vertex data this source is the most optimal so far
		}
		return dt;
	}


	void start(const vertex& s) override {
		r.clear();
		vd.clear();
		vd.emplace(&s,Vdata(0)); //Score
	};
	
	void visit(const edge& e) override {
		relax(e);
	}

	void finished() override {
		auto icur=vd.find(t);
		if (icur==vd.end()) return; //no hay conexion con el nodo buscado
		Vdata*cur=&icur->second;
		vector<const vertex*> rp;
		while(cur->from!=0) {
			rp.push_back(cur->get_dst_vertex());
			const vertex* src=cur->get_src_vertex();
			if (src==0) break;
			cur=&vd.find(src)->second;
		}		
		//reverse it
		r.reserve(rp.size()+1);
		r.push_back(f);
		for (auto i=rp.rbegin(); i!=rp.rend(); ++i) {
			r.push_back(*i);
		}
	}


};



}

#endif

